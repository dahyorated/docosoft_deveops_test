trigger:
  branches:
    include:
      - main
      - features/*
  paths:
    include:
      - src/CounterApi.csproj
      - tests/CounterAPI.Tests/CounterAPI.Tests.csproj
      - Dockerfile
      - .azure-pipelines/azure-build.yml

pr:
  branches:
    include:
      - main
      - features/*

variables:
  buildConfiguration: 'Release'
  dotNetSdkVersion: '8.0.100'
  dockerRegistryServiceConnection: 'sp-acrezidocosoft'
  imageRepository: 'counterapi'
  dockerfilePath: 'Dockerfile'

pool:
  name: 'ezi-ado-host'

stages:
- stage: Build
  displayName: Build & Test
  jobs:
  - job: BuildAndTestApp
    displayName: Build .NET App and Docker Image
    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET SDK $(dotNetSdkVersion)'
      inputs:
        version: '$(dotNetSdkVersion)'
        includePreviewVersions: true

    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet packages'
      inputs:
        command: 'restore'
        projects: 'CounterApi.sln'

    - task: DotNetCoreCLI@2
      displayName: 'Build application'
      inputs:
        command: 'build'
        projects: 'src/CounterApi.csproj'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Build test project'
      inputs:
        command: 'build'
        projects: 'tests/CounterAPI.Tests/CounterAPI.Tests.csproj'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Run unit tests'
      inputs:
        command: 'test'
        projects: 'tests/CounterAPI.Tests/CounterAPI.Tests.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build --collect "Code Coverage"'

    - task: Docker@2
      displayName: 'Build and push Docker image'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'buildAndPush'
        Dockerfile: '$(dockerfilePath)'
        buildContext: '.'
        tags: |
          $(Build.BuildId)
          latest

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts (app and Dockerfile)'
      inputs:
        pathToPublish: '$(Build.SourcesDirectory)'
        artifactName: 'build_artifacts'
        publishLocation: 'Container'
# comment to trigger release